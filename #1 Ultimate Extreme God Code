import tkinter as tk
import numpy as np
import pandas as pd
import random


class Application(tk.Frame):
    
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        self.grid()
        self.create_widgets()
        
    def create_widgets(self):
        w = tk.Label(self, text="Select desired columns:", bg='#aaa', width=50)
        w.grid(row=1, column=0, sticky=tk.W)
        
        checkboxes = {'claim_id': 2,
                      'empi_id': 3,
                      'population_id': 4,
                      'service_from_date': 5,
                      'service_to_date': 6,
                      'drg_admit_display': 7,
                      'source_description': 8,
                      'provider_name': 9,
                      'specialty': 10,
                      }
        
        self.checkbox_dict = {}
        for k,v in checkboxes.items():
            self.checkbox_dict[k] = tk.BooleanVar()
            tk.Checkbutton(self, text=k, variable=self.checkbox_dict[k]
            ).grid(row=v, column=0, pady=10, stick=tk.W)




        """
        self.checkBox_claim_id = tk.BooleanVar()
        tk.Checkbutton(self,
                    text = "claim_id",
                    variable = self.checkBox_claim_id,
                    ).grid(row = 2, column = 0, pady = 10, sticky = tk.W)
        
        self.checkBox_empi_id = tk.BooleanVar()
        tk.Checkbutton(self,
                    text = "empi_id",
                    variable = self.checkBox_empi_id,
                    ).grid(row = 3, column = 0, pady = 10, sticky = tk.W)

        self.checkBox_pop_id = tk.BooleanVar()
        tk.Checkbutton(self,
                    text = "population_id",
                    variable = self.checkBox_pop_id,
                    ).grid(row = 4, column = 0, pady = 10, sticky = tk.W)
        
        self.checkBox_serv_from_date = tk.BooleanVar()
        tk.Checkbutton(self,
                    text = "service_from_date",
                    variable = self.checkBox_serv_from_date,
                    ).grid(row = 5, column = 0, pady = 10, sticky = tk.W)
        
        self.checkBox_serv_to_date = tk.BooleanVar()
        tk.Checkbutton(self,
                    text = "service_to_date",
                    variable = self.checkBox_serv_to_date,
                    ).grid(row = 6, column = 0, pady = 10, sticky = tk.W)
        
        self.checkBox_drg = tk.BooleanVar()
        tk.Checkbutton(self,
                    text = "drg_admit_display",
                    variable = self.checkBox_drg,
                    ).grid(row = 7, column = 0, pady = 10, sticky = tk.W)
        
        self.checkBox_source = tk.BooleanVar()
        tk.Checkbutton(self,
                    text = "source_description",
                    variable = self.checkBox_source,
                    ).grid(row = 8, column = 0, pady = 10, sticky = tk.W)
        
        self.checkBox_prov_name = tk.BooleanVar()
        tk.Checkbutton(self,
                    text = "provider_name",
                    variable = self.checkBox_prov_name,
                    ).grid(row = 9, column = 0, pady = 10, sticky = tk.W)
        
        self.checkBox_spec = tk.BooleanVar()
        tk.Checkbutton(self,
                    text = "specialty",
                    variable = self.checkBox_spec,
                    ).grid(row = 10, column = 0, pady = 10, sticky = tk.W)
"""

        tk.lbl = tk.Label(self, text="How many rows?"
                          ).grid(row=11, sticky = tk.W, padx=10, pady=10)
        
        self.entry_1 = tk.Entry(self)
        self.entry_1.grid(row=11, column=0, padx=10, pady=10, columnspan = 3)

        self.get_data_button = tk.Button(self, text='Generate Data',
                                         command=self.generate_data)
        self.get_data_button.grid(row=12, column=0, pady=10)
        
    def generate_data(self):
        days = np.arange(0, 365)
        base_date = np.datetime64('2016-01-01')
        
        days = np.arange(0, 365)
        newbasedate = np.datetime64('2018-01-01')
        
        drg = pd.read_csv(r".\aprdrg_list.csv")
        drg_list = drg.drg_admit_display.tolist()
        
        payer_list = ['Medicare', 'Medicaid', 'Private']
        
        prov_list = ['Dr. Mark Greene', 'Dr. Doug Ross', 'Dr. Susan Lewis', 'Dr. John Carter',  'Dr. Carol Hathaway', 'Dr. Derek Sheperd', 'Dr. Meredith Grey', 'Dr. Andrew DeLuca', 'Dr. Jackson Sloan', 'Dr. Alex Avery', 'Dr. Izzie Karev', 'Dr. Callie Stevens']
        
        spec_list = ['Anesthesiology', 'Cardiology','Dermatology', 'Family Practice', 'Gastroenterology', 'Internal Medicine'] 
        
        try:
            num_rows = int(self.entry_1.get())
        except ValueError:
            num_rows = 1


        df_dict = {}
        for i in range(num_rows):
            columns = {}
            if self.checkbox_dict['claim_id'].get():
                columns['claim_id'] = random.randint(000000,999999)
            if self.checkbox_dict['empi_id'].get():
                columns['empi_id'] = random.randint(000000,999999)
            if self.checkbox_dict['population_id'].get():
                columns['population_id'] = random.randint(000000,999999)
            if self.checkbox_dict['service_from_date'].get():
                columns['service_from_date'] = base_date + np.random.choice(days)
            if self.checkbox_dict['service_to_date'].get():
                columns['service_to_date'] = newbasedate + np.random.choice(days)
            if self.checkbox_dict['drg_admit_display'].get():
                columns['drg_admit_display'] = np.random.choice(drg_list)
            if self.checkbox_dict['source_description'].get():
                columns['source_description'] = np.random.choice(payer_list)
            if self.checkbox_dict['provider_name'].get():
                columns['provider_name'] = np.random.choice(prov_list)
            if self.checkbox_dict['specialty'].get():
                columns['specialty'] = np.random.choice(spec_list)


            """
            if self.checkBox_claim_id.get():
                columns['claim_id'] = random.randint(000000,999999)
            if self.checkBox_empi_id.get():
                columns['empi_id'] = random.randint(000000,999999)
            if self.checkBox_pop_id.get():
                columns['pop_id'] = random.randint(000000,999999)
            if self.checkBox_serv_from_date.get():
                columns['serv_from_date'] = base_date + np.random.choice(days)
            if self.checkBox_serv_to_date.get():
                columns['serv_to_date'] = newbasedate + np.random.choice(days)
            if self.checkBox_drg.get():
                columns['drg'] = np.random.choice(drg_list)
            if self.checkBox_source.get():
                columns['source'] = np.random.choice(payer_list)
            if self.checkBox_prov_name.get():
                columns['prov_name'] = np.random.choice(prov_list)
            if self.checkBox_spec.get():
                columns['spec'] = np.random.choice(spec_list)
"""


            df_dict[i] = columns
        demo_df = pd.DataFrame(data=df_dict)
        demo_df = demo_df.transpose()
        demo_df.to_csv('final.csv', index=False, sep=',')
        print(demo_df)



root = tk.Tk()
root.title("Data Generator")
app = Application(root)
root.mainloop()
